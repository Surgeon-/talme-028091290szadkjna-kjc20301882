<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_settings</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic setup:
scroll=0;
selected=0;
mode=0;
max_rows=0;

sprite_scale = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Update settings:
if (room != room_menu)
 sett_update_settings();

sett_update_controls();

//Write to INI:
ini_open("Settings.ini");

sett_ini_write();

ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Closing:
if keyboard_check_pressed(userControls[KEYBOARD.pause])=true
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,a,xx,yy,list_array,str;

var tlerp = (sett_get_value("Interpolation") == "On");

//Set up GUI x and y:
xx=gui_width()/2-sprite_scale*sprite_get_width(sprite_index)/2;
yy=gui_height()/2-sprite_scale*sprite_get_height(sprite_index)/2;

//Draw own sprite:
draw_sprite_ext(spr_window_settings, 0, xx, yy, sprite_scale, sprite_scale, 0, c_white, 1);

//Tabs:
switch (mode) begin

 case 0: //Controls
   if gui_draw_rectangle_clickable(xx+152,yy+70,138,36,true)=true {
    mode=1;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+294,yy+70,138,36,true)=true {
    mode=2;    
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+436,yy+70,138,36,true)=true {
    mode=3;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+578,yy+70,138,36,true)=true {
    mode=4;
    scroll=0;
    }
   draw_sprite_ext(spr_window_settings_tab, 0 ,xx+10, yy+70, sprite_scale, sprite_scale, 0, c_white, 1);
  break;

 case 1: //Gameplay
   if gui_draw_rectangle_clickable(xx+10,yy+70,138,36,true)=true {
    mode=0;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+294,yy+70,138,36,true)=true {
    mode=2;    
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+436,yy+70,138,36,true)=true {
    mode=3;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+578,yy+70,138,36,true)=true {
    mode=4;
    scroll=0;
    }
    draw_sprite_ext(spr_window_settings_tab, 1, xx+150, yy+70, sprite_scale, sprite_scale, 0, c_white, 1);
  break;
  
 case 2: //Audio
   if gui_draw_rectangle_clickable(xx+10,yy+70,138,36,true)=true {
    mode=0;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+152,yy+70,138,36,true)=true {
    mode=1;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+436,yy+70,138,36,true)=true {
    mode=3;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+578,yy+70,138,36,true)=true {
    mode=4;
    scroll=0;
    }
   draw_sprite_ext(spr_window_settings_tab, 2, xx+292, yy+70, sprite_scale, sprite_scale, 0, c_white, 1);
  break;
  
 case 3: //Video
   if gui_draw_rectangle_clickable(xx+10,yy+70,138,36,true)=true {
    mode=0;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+152,yy+70,138,36,true)=true {
    mode=1;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+294,yy+70,138,36,true)=true {
    mode=2;    
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+578,yy+70,138,36,true)=true {
    mode=4;
    scroll=0;
    }
   draw_sprite_ext(spr_window_settings_tab, 3, xx+434, yy+70, sprite_scale, sprite_scale, 0, c_white, 1);
  break;
  
 case 4: //Other
   if gui_draw_rectangle_clickable(xx+10,yy+70,138,36,true)=true {
    mode=0;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+152,yy+70,138,36,true)=true {
    mode=1;
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+294,yy+70,138,36,true)=true {
    mode=2;    
    scroll=0;
    }
   if gui_draw_rectangle_clickable(xx+436,yy+70,138,36,true)=true {
    mode=3;
    scroll=0;
    }
   draw_sprite_ext(spr_window_settings_tab, 4, xx+576, yy+70, sprite_scale, sprite_scale, 0, c_white, 1);
  break;
  
 default:
  break;

end;

//Scroll draw:
switch (mode) begin

 case 0: //Controls
  max_rows=max(global.sett_controls,1);
  break;
 
 case 1: //Gameplay
  max_rows=max(global.sett_gameplay,1);
  break;
 
 case 2: //Audio
  max_rows=max(global.sett_sound,1);
  break;
 
 case 3: //Video
  max_rows=max(global.sett_graphics,1);
  break;
 
 case 4: //Other
  max_rows=max(global.sett_misc,1);
  break;
 
 default:
  break;

end;

if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+688,yy+120,true)
or mouse_wheel_up() {
 if scroll&gt;0 scroll-=1;
 }
 
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+688,yy+480,true)
or mouse_wheel_down() {
 if scroll&lt;max_rows-10 scroll+=1;
 }

scroll=gui_draw_scroll_bar(xx+688,yy+160,xx+708,yy+476,max_rows,10,scroll,placeholderSpr);

//List draw:
list_array=sett_list_group(mode,scroll);

draw_set_halign(fa_left);
draw_set_valign(fa_top);
fnt_draw_set(FONT.window);

for (i=0; i&lt;=9; i+=1) begin

 if list_array[i]&lt;&gt;-1 {
 
  ftlerp();
  
  if (gui_draw_sprite_hover_scale(spr_window_settings_field,0,xx+16,yy+120+i*40,sprite_scale,sprite_scale)) {
  
   str=sett_fetch_desc(list_array[i]);
   draw_set_colour(c_black);
   draw_text_ext(xx+20,yy+534,str,30,690);
   
   if mode==0 {
    a=keyboard_get_input();
    str='#To change a key binding press and hold the new key then press "Change".#Currently pressed button: '+a[1];
    draw_set_colour(c_dkgray);
    draw_text_ext(xx+20,yy+576,str,16,690);
    }
    
   }
  
  draw_set_colour(c_black);
  draw_text(xx+24,yy+124+i*40,global.sett_grid[#0,list_array[i]]);
  
  if (global.sett_grid[#1,list_array[i]] != SETT_TYPE.execute_string) {
  
    if (mode != 0)
      draw_text(xx+284,yy+122+i*40,force_string(sett_get_value(global.sett_grid[#0,list_array[i]])))
    else 
      draw_text(xx+284,yy+122+i*40,key_to_string(sett_get_value(global.sett_grid[#0,list_array[i]])));
    
    }
    
  rtlerp(tlerp);
    
  sett_draw_widget( global.sett_grid[#0,list_array[i]]
                  , global.sett_grid[#1,list_array[i]]
                  , list_array[i]
                  , xx+422
                  , yy+126+i*40
                  , global.sett_grid[#5,list_array[i]]
                  ) ;
  
  }
  
draw_set_alpha(1);
  
end;


//Close button:
if gui_draw_sprite_clickable_rel(spr_window_close,0,xx+492,yy+702)=true
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
