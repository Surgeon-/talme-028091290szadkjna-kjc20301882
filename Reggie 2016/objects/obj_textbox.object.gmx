<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_textbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Visual:
offset = 1;
sprite_scale = 2;

name_1="Name 1";
name_2="Name 2";
sprite_1=spr_portrait_template;
sprite_2=spr_portrait_template;

text_grid=ds_grid_create(1,1);
text_grid[#0,0]=ds_list_create();
rows[0]=0;
enabled[0]=0;

scroll=0;
letters=0;
letters_max=0;

switch (sett_get_value("Textbox Speed")) {

  case "Slow":
    letters_per_step=1;
    break;
  
  case "Regular":
    letters_per_step=2.5;
    break;
  
  case "Fast":
    letters_per_step=4;
    break;
  
  case "Instant":
    letters_per_step=0;
    break;
  
  default:
    break;

  }

//Setup:
txt_local_init();

choice = 0;
  
//Other:
update_box = true;
text_width = 910;
text_sep = 36;
text_max_rows = 10;

//Scene:
game_start_scene(true);
camera_target_x=0;
camera_target_y=0;
cov=0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
TPP_text_free(text_grid);
txt_clear();
game_end_scene();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>!game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choices &amp; Updating

//Offset:
if (offset&lt;0.000) { 
  offset=0;  
  } 
  else if (offset&gt;0) {  
   offset-=0.025;   
   }

//Scene:
var bbh=obj_game_controller._drawY,
    cov=max(0,sprite_height-bbh)/(4-gui_get_scale());

game_set_scene_camera(camera_target_x,camera_target_y+cov);
   
//Choices:
var a;

if (choice = 0 and letters &gt;= letters_max) {

 if keyboard_check_pressed(ord("1"))=true choice=1
  else if keyboard_check_pressed(ord("2"))=true choice=2
   else if keyboard_check_pressed(ord("3"))=true choice=3
    else if keyboard_check_pressed(ord("4"))=true choice=4
     else if keyboard_check_pressed(ord("5"))=true choice=5
      else if keyboard_check_pressed(ord("6"))=true choice=6
       else if keyboard_check_pressed(ord("7"))=true choice=7
        else if keyboard_check_pressed(ord("8"))=true choice=8
         else if keyboard_check_pressed(ord("9"))=true choice=9
          else if keyboard_check_pressed(ord("0"))=true choice=10;
   
 };
 
if (choice != 0 and choice &gt; txt_local_choices()) choice = 0;

// UPDATE:
var status = txt_local_update(choice);

if (status == TXT_STATUS.update_ok) {

 choice = 0;
 
 io_clear();
 
 scroll = 0;
 update_box = true;

 }
else if (status == TXT_STATUS.end_of_dia) {

  instance_destroy();
  exit;

  }
else if (status == TXT_STATUS.no_change) {
  // Do nothing
  }
else {
  // Error - STUB
  }
 
// TEXT UPDATE:

//Scroll:
if (mouse_wheel_up()) scroll -= 1;
else if (mouse_wheel_down()) scroll += 1;
 
scroll = clamp(scroll, 0, max(TPP_text_get_lines(text_grid) - text_max_rows, 0) );

//Textbox update:
if (update_box) {

  var i,g,b,text_main,text_choice,text_cond,do_show,counter;
  
  //Text grid:
  TPP_text_free(text_grid);
  rows = 0;
  
  text_main = txt_local_get_main() + "\n" + string_repeat("=", 48);
  letters_max = TPP_text_length(text_main);
  
  g = TPP_text_parse(text_main,c_black,1,fnt_get(FONT.textbox_regular),fa_center,text_width,text_sep,1);
  rows[0] = TPP_text_get_lines(g);
  
  counter = 1;
  
  for (i = 1; i &lt;= txt_local_choices(); i += 1) {
  
    var a = txt_local_get_choice(i);
    
    if (a[1]) {
    
      b = string(counter) + ". " + a[0];   
      enabled[i] = true;
      counter += 1;
    
      var t = TPP_text_get_lines(g);
      TPP_text_append(g, b);
      rows[i] = TPP_text_get_lines(g) - t;
    
      letters_max += TPP_text_length(b);
    
      }
    else {
    
      rows[i] = 0;
      enabled[i] = false;
    
      }
      
    }
  
  text_grid = g;
  
  //Other:
  scroll = 0;
  
  letters = 0;
  update_box = false;
 
  }

//Textbox update:
/*if update_box=true {

 var i,g,b,text_main,text_choice,text_cond,do_show,counter;

 //Text grid:
 TPP_text_free(text_grid);
 rows=0;
 
 text_main=txt_property_get(stage,branch,TEXTBOX.main)+"\n"+string_repeat("=",48);
 letters_max=TPP_text_length(text_main);

 g=TPP_text_parse(text_main,c_black,1,fnt_get(FONT.textbox_regular),fa_center,text_width,text_sep,1);
 rows[0]=TPP_text_get_lines(g);
 
 counter=1;
 for (i=1; i&lt;=txt_property_get(stage,branch,TEXTBOX.choices); i+=1) begin
 
  text_choice=string_replace(txt_choice_get(stage,branch,i),"{End}","");
  
  //Check for condition:
  do_show=false;
  if string_pos("{Cdt}",text_choice)&gt;0 { // TEMP - string_pos -&gt; var
  
   text_cond=string_copy(text_choice,1,string_pos("{Cdt}",text_choice)-1);
   text_choice=string_delete(text_choice,1,string_pos("{Cdt}",text_choice)+4);
  
   //show_message("Evaluating condition: " + text_cond);
   
   if (NSP_evaluate(text_cond))
    do_show=true;
    
   //show_message(do_show);
   
   }
   else do_show=true;
 
  //Show:
  if do_show=true {
   
   b=string(counter)+". "+text_choice;   
   enabled[i]=true;
   counter+=1;
   
   var t=TPP_text_get_lines(g);
   TPP_text_append(g,b);
   rows[i]=TPP_text_get_lines(g)-t;
   
   letters_max+=TPP_text_length(b);
   
   }
   //Don't show:
   else {
   
    rows[i]=0;
    enabled[i]=false;
   
    }
 
 end;

 //text_array=a;
 text_grid=g;
 
 //Other:
 scroll=0;
 code_sec=txt_property_get(stage,branch,TEXTBOX.code_s);
 
 //Execute Primary Code:
 var c=txt_property_get(stage,branch,TEXTBOX.code_p);
 
 if is_string(c) {
  if c&lt;&gt;"" {
   NSP_execute_string(c);
   }
  }
 
 letters=0;
  
 update_box=false;
 
 }*/
 
//Text printing:
if (letters_per_step != 0) {

  if (letters &lt; letters_max)
    letters += letters_per_step;
    
  }
else
  letters = letters_max;






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>!game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx,yy

//Set up GUI x and y:
xx=gui_width()/2-2*sprite_get_width(sprite_index)/2;
yy=gui_height()-round(2*sprite_get_height(sprite_index)*(1-offset));

//Draw own sprite:
draw_sprite_ext(sprite_index,0,xx,yy,2,2,0,c_white,1);

//Debug draw:
if (false) {
 draw_text(xx+9,yy+180,"s"+string(stage)+"b"+string(branch));
 }

//Draw portraits:
draw_sprite_ext(sprite_1,0,xx+16,yy+24,2,2,0,c_white,1);
draw_sprite_ext(sprite_2,0,xx+1176,yy+24,2,2,0,c_white,1);

//Draw names:
fnt_draw_set(FONT.window);
draw_set_colour(c_black);

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(xx+212, yy+10, name_1);

draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_text(xx+1146, yy+10, name_2);

//Crash safety:
if (update_box=true) exit;

//Draw clickable bars:
var i,h,first,last,row;

first=scroll;
last=min(first+text_max_rows,TPP_text_get_lines(text_grid));
h=text_sep;

if (letters&gt;=letters_max) {

 for (i=1; i&lt;=txt_local_choices(); i+=1) begin

  if enabled[i]=true {

   row=1;
   for (t=0; t&lt;i; t+=1) {row+=rows[t];}
 
   if (row&lt;=last and row+rows[i]-1&gt;=first+1) {
 
    if gui_draw_rectangle_clickable(xx+206,yy+70+h*max(row-scroll-1,0),918,h*(rows[t]-max(first+1-row,0)-max(row+rows[i]-1-last,0)),true)=true {
 
     choice=i;
     
     //show_message("choice = " + string(choice));
 
     }
    
   }
   
  }

 end;

 }
 
//Draw text:
var tlerp = (sett_get_value("Interpolation") == "On");

ftlerp();
TPP_text_print_ext_part(xx+210,yy+68,text_grid,fa_left,fa_top,first+1,last,letters);
rtlerp(tlerp);

//Scroll:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+1130,yy+68,true)=true {
 scroll-=1;
 }
 
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+1130,yy+394,true)=true {
 scroll+=1;
 }
 
scroll=gui_draw_scroll_bar(xx+1130,yy+108,xx+1150,yy+390,TPP_text_get_lines(text_grid),text_max_rows,scroll,placeholderSpr);

scroll=clamp(scroll,0,max(TPP_text_get_lines(text_grid)-text_max_rows,0));

//Close button:
//-Not allowed.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dummy

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
