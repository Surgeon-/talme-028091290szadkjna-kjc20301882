<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>placeholderSpr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>bodyParObj</parentName>
  <maskName>playerDefaultMaskSpr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Initialization

//&lt;MOVEMENT&gt; variables:

  //Output:
  _hspeed   = 0;
  _vspeed   = 0;
  _grounded = 0;
  _climb    = 10;
  
  //Mask:
  _maskDefault = aiDefaultMask;
  _maskCrouch  = aiCrouchMask;
   mask_index  = _maskCrouch;
  _height = sprite_get_height(mask_index);
  _width  = sprite_get_width(mask_index);
  
  //Default variables: (Enumerate All)
  def_maxspeed     = 5;
  def_climbspeed   = 2;
  def_acceleration = 0.8;
  def_jumpPower    = 12;
  def_aircontrol   = 0.4;
  def_abscontrol   = 1;
  def_gravity      = 0.6;
  def_friction     = 1 - 0.005;
  
  //Other:
  _moveMode   = 0;
  _moveType   = 3;
  _moveHeight = 0;
  _jumpCd     = 0;
  _jumpCdMax  = 0;
  
  _allowedLadder = true; // e
  
  _xPrevOlder = x;
  _xPrevOld   = x;
  
  _hSpeedTreshold = 11;   // e
  _vSpeedTreshold = 14;   // e
  
  _KBresist = 0;
  
  _eccentricity   = 1;  // e
  _rangeTolerance = 32; // e, d
  _prefTolerance  = 0;  // e, d 
  pfd_instance_init();
 
//&lt;BEHAVIOUR&gt; variables:

  _scriptIdle = 0; // d
  _scriptHide = 0; // d
  _scriptStep = 0; // d
  
  _skipUpdate = 0;

//&lt;COMBAT&gt; variables:

  //Basic:
  _group = GROUP.enemy;
  
  _maxHealth = 100;     // e
  _health    = _maxHealth;
  _armour    = 0;       // e
  
  _aiState        = AI_STATE.idle;
  _target         = -1;
  _tarX           = -1;
  _tarY           = -1;
  _hiddenTimer    = 0;
  _hiddenTimerMax = 900; // e
  _fleeTimerMax   = 300; // e
  _prefDistPrim   = 0;   // e
  _prefDistSec    = 0;   // e
  _prefDist       = _prefDistPrim;
  _viewRange      = 800; // e - Larger than preferred distance
  _playerBias     = 50;  // e 
  
  //Buffs:
  buf_instance_init();
  res_instance_register();
  
  //Patrol:
  point_1_x = -1;
  point_1_y = -1;
  point_2_x = -1;
  point_2_y = -1;
  _aiPatrol = false;
  _aiPatrolNode = 0;
  
  //Guard:
  _startX     = x;
  _startY     = y;
  _aiGuard    = false;
  _guardRange = 240;
  _guardBody  = -1;
  
  //Morale:
  _moraleBase    = 0; // e
  _moraleCounter = irandom(60);
  _morale        = (MORALE.flee + MORALE.rage) / 2;
  
  //Spawn Point 
  _spawnPointEnabled    = false;
  _allowedSpawnDistance = 100;

//&lt;OTHER&gt; variables:

 _density      = 15 / 100;
 _eyesYDefault = 15; // e
 _eyesYCrouch  = 7;  // e
 _eyesY        = _eyesYDefault;
 _relY         = sprite_get_height(_maskDefault)-sprite_get_height(_maskCrouch);
 _randomGen    = 0;
 _randomGenCounter = 0;
 _idleType     = 0;
 sprite_index  = choose(spr_enemy_brain,
                        spr_enemy_robocop,
                        spr_enemy_sponge,
                        spr_enemy_prime,
                        spr_enemy_ninja,
                        spr_enemy_fsm);
 
 _bufSave = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup

 //Primary attack:
 _attackRange=32;     // e - Lower than preferred distance
 _attackSpeed=40;     // e
 _attackLength=20;    // e
 _attackDamage=5;     // e
 _attackHKnock=10;    // e
 _attackVKnock=5;     // e 
 
 //Secondary attack:
 _attackRangeSec=480;
 _attackLengthSec=5;
 _attackDamageSec=5;
 _attackKnockSec=10;
 
 _weaponRotSpeed=15;
 _weaponRotSmooth=80;
 _weaponXOffset=32;
 _weaponYOffset=0;
 _weaponAngle=0;
 _attackSpeedSec=15;
 
 //General:
 _attackTimer=-_attackSpeed;
 _attackTimerSec=-_attackSpeedSec;
 _attackMode=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free memory
buf_instance_free();

res_instance_unreg();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup
var __dist;

//*********************************
if object_index=obj_ai_parent begin
//*********************************

if _aiState=AI_STATE.hunt {

 _attackMode=0;
      
 _prefDist=_prefDistPrim;  
   
 }
 
//Cooldowns:
if _attackTimer&gt;-_attackSpeed
 _attackTimer-=1;
 
if _attackTimerSec&gt;-_attackSpeedSec
 _attackTimer-=1;
 
//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update

// Load recovery -- STUB
/*if (res_instance_get_flag() == RES_FLAG.do_recover) {

  //show_message("Enemy recovering");

  buf_instance_recover();
  //buf_instance_init();
  
  res_instance_init();

  }*/

// Calc General Random:
if (_randomGenCounter &gt; 0) {
  _randomGenCounter -= 1;
  }
else {
  _randomGenCounter = 59;
  _randomGen = 1 + irandom(99);
  }

// Save old xPrevious:
_xPrevOlder = _xPrevOld;
_xPrevOld   = xprevious;

//*** MOVEMENT TYPE &amp; HEIGHT: ***
var __ceiling, __ladder;

__ladder = false;

set_mask(_maskDefault);
__ceiling = place_meeting_solid(x, y);

if (__ceiling == false and _allowedLadder == true)
  __ladder = place_meeting_obj(x, y, ladderObj, false);
  
set_mask(_maskCrouch);
if (__ceiling == true and _allowedLadder == true)
  __ladder=place_meeting_obj(x, y, ladderObj, false);

if (_grounded == true) {

 _moveType = AI_MOVE.mt_normal;
 
 //* JUMP COOLDOWN *//
 if (_jumpCd&gt;0)
 
  _jumpCd-=1; 
 
 }
 else {
 
  if (__ladder=true)
   _moveType = AI_MOVE.mt_ladder;
   else
    _moveType = AI_MOVE.mt_airborne;
    
  //* JUMP COOLDOWN *//
  if (_jumpCd&gt;0)
   _jumpCd-=0.5; 
 
  }

if (!__ceiling)
  _moveHeight = AI_MOVE.mh_normal;
 else
  _moveHeight = AI_MOVE.mh_crouch; 

//*** SET EYE LEVEL: ***
if (_moveHeight=1)
 _eyesY=_eyesYCrouch;
 else
  _eyesY=_eyesYDefault;

//*** CALC MORALE: ***
 if _moraleCounter&gt;0 _moraleCounter-=1
  else {
   _moraleCounter=60;
   _morale=ai_calc_morale(_moraleBase);
   }
   
//*** STATE CORRECTION: *** 

if _skipUpdate=0 {

switch (_aiState) begin

 case AI_STATE.idle: // ------------------------------------------------------- Idle
   var a;

   //Switch to ret if allowed:
   if _aiGuard=true and (
      point_distance(x,y,_startX,_startY)&gt;_guardRange
      or (_guardBody&gt;0 and point_distance(x,y,_guardBody.x,_guardBody.y)&gt;_guardRange)) {
      
    _aiState=AI_STATE.ret;
    ai_move(_startX, _startY, AI_MOVE.mm_towards);
    
    }
   //Switch to patrol if allowed:
    else if _aiPatrol=true {
     _aiState=AI_STATE.patrol;
     if _aiPatrolNode=0 {
      
      ai_move(point_2_x, point_2_y, AI_MOVE.mm_towards);
      
      }
      else {

       ai_move(point_1_x, point_1_y, AI_MOVE.mm_towards);
       
       }
     }
     else {
      ai_execute_idle(_idleType); 
      
      if (_scriptIdle &lt;&gt; 0)
       script_execute(_scriptIdle);
        
      if (_moveType == AI_MOVE.mt_ladder)
       _moveType = AI_MOVE.mt_normal;
       
      _moveMode = AI_MOVE.mm_inertial;
      }
    
   //Engage in combat if needed:
   ai_engage(40,_viewRange,_playerBias);
  break;
  
 case AI_STATE.patrol:  // ---------------------------------------------------- Patrol
   if _aiPatrol=false
    _aiState=AI_STATE.idle
    else {
     //Change node if needed:
     if _aiPatrolNode=0 {
      if point_distance(x,y,point_2_x,point_2_y)&lt;32
       _aiPatrolNode=1; }
      else {
       if point_distance(x,y,point_1_x,point_1_y)&lt;32
       _aiPatrolNode=0;
       }    
     //Go to node:
     if _aiPatrolNode=0 {

      ai_move(point_2_x, point_2_y, AI_MOVE.mm_towards);
      
      }
      else {
       
       ai_move(point_1_x, point_1_y, AI_MOVE.mm_towards);
       
       }
     //Engage in combat if needed:
     ai_engage(40,_viewRange,_playerBias);
     }
  break;
  
 case AI_STATE.ret: //aka. Guard ---------------------------------------------- Ret / Guard
   var tmode;
   
   if (point_distance(x,y,_tarX,_tarY) &gt; _width+_guardRange)
     tmode = AI_MOVE.mm_towards;
   else
     tmode = AI_MOVE.mm_inertial;
 
   if (_guardBody == -1) {

     ai_move(_startX, _startY, tmode);
    
     }
   else {
     
     ai_move(_guardBody.x, _guardBody.y, tmode);
     
     }
   
   //Engage in combat if needed:
   ai_engage(40, _viewRange, _playerBias);
   
  break;
  
 case AI_STATE.flee:  // ------------------------------------------------------ Flee
   var a;
   
   if irandom(10)&gt;6 {
     a=ai_select_target(_group,max(_viewRange,400),100);
     
     if a&gt;0 {
      _target=a;
      
      ai_move(_target.x, _target.y, AI_MOVE.mm_away_from);
      
      _hiddenTimer = _fleeTimerMax;
      }
       
     }
   
   _hiddenTimer-=1;

   //Stop fleeing if morale changes:
   if _morale&gt;MORALE.flee or _hiddenTimer&lt;0
    _aiState=AI_STATE.idle;
  break;
  
 case AI_STATE.forcedmove: //-------------------------------------------------- Forced move
   // Only used as a surrogate State for forced movements.
   // Ends when updates are no longer skipped. 
   _aiState=AI_STATE.idle;
  break;
  
 case AI_STATE.hide:  // ------------------------------------------------------ Hide
   //Run away while visible:
   if irandom(10)&gt;6 {
    a=ai_select_target(_group,max(_viewRange,400),100);
    
    if a&gt;0 {
      _target=a;
      _tarX=_target.x;
      _tarY=_target.y-_target._eyesY;
      }
      
    }
    
   if (instance_exists(_target) and _target&gt;0)
    _moveMode=2
    else
     _moveMode=0;
     
   //Try crouching:
   var __clc, __clu;
   
   __clc=!HG_collision_line(-1,x,y,_tarX,_tarY,GLOBAL.precision);
   __clu=!HG_collision_line(-1,x,y-_eyesY,_tarX,_tarY,GLOBAL.precision);
   
   if (!__clc and !__clu)
    _target=-1;
   
   if _moveHeight=0 {    
    if (__clc=false and __clu=true)
     _moveHeight=1;   
    }
    
   //Hidden actions:
   if (__clc=false and __clu=false) {
    if _scriptHide&lt;&gt;0
     script_execute(_scriptHide);
    }
    
  break;
  
 case AI_STATE.hunt:  // ------------------------------------------------------ Hunt
   
      //Switch to spawn point ret if allowed:
   if ((_spawnPointEnabled=true) and (point_distance(x,y,_startX,_startY)&gt;_allowedSpawnDistance))
    {
    _aiState=AI_STATE.ret;
    _tarX=_startX;
    _tarY=_startY;
    _moveMode=1;
    }
   //Morale too low:
   if _morale&lt;MORALE.flee 
    _aiState=AI_STATE.flee
    //No target:
    else if !(instance_exists(_target) and _target&gt;0) {
     _aiState=AI_STATE.idle;
     _moveMode=0; 
     _target=-1;
     }
     //Hide:
     else if (_attackMode=-1) {
      _aiState=AI_STATE.hide;
      }
      else {
       var __clf, __pd;
       
       _tarX=_target.x;
       _tarY=_target.y; 
     
       //Keep preferred distance:
       __clf=!HG_collision_line(-1,x,y-_eyesY,_tarX,_tarY,GLOBAL.precision);
       if (_moveHeight=0)
        set_mask(_maskDefault);
       __pd=distance_to_object(_target);
       set_mask(_maskCrouch);
       
       //Reset Player's combat timer:
       if (_target=global.player_obj_id) and __clf=true
        player_reset_combat_timer();

       if (abs(__pd-_prefDist)&lt;=_prefTolerance and __clf=true)
       //or (abs(x-_tarX)&lt;=_rangeTolerance/2 and __pd&lt;=_rangeTolerance)
        _moveMode=0
        else if (__pd&gt;_prefDist or __clf=false)
         _moveMode=1
         else if (__pd&lt;_prefDist and __clf=true)
          _moveMode=2;
          else
           _moveMode=0;
           
       //Adjust hidden timer, change target if needed:
       if __clf=true
        _hiddenTimer=_hiddenTimerMax
        else {
         _hiddenTimer-=1;
         ai_engage(20,_viewRange,_playerBias);
         }
       if _hiddenTimer=0 {
        _aiState=AI_STATE.idle;
        _moveMode=0;
        _target=-1;
        }        
       }
  break;
  
 default:
  break;

end;

}
else
 _skipUpdate-=1;

//*** SET VARIABLES: ***

switch (_aiState) begin

  case AI_STATE.idle:
     _maxspeed     = def_maxspeed;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  case AI_STATE.patrol:
     _maxspeed     = def_maxspeed / 2.0;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration / 2.0;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  case AI_STATE.ret:
     _maxspeed     = def_maxspeed;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  case AI_STATE.flee:
     _maxspeed     = def_maxspeed * 1.0;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  case AI_STATE.hide:
     _maxspeed     = def_maxspeed;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  case AI_STATE.forcedmove:
     _maxspeed     = def_maxspeed;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  case AI_STATE.hunt:
     _maxspeed     = def_maxspeed;
     _climbSpeed   = def_climbspeed;
     _acceleration = def_acceleration;
     _jumpPower    = def_jumpPower;
     _aircontrol   = def_aircontrol;
     _abscontrol   = def_abscontrol;
     _gravity      = def_gravity;
     _friction     = def_friction;
    break;
  
  default:
    break;

end;

//*** APPLY MOVE TYPE &amp; HEIGHT: ***
if _moveHeight=1 { // Crouch:
 _maxspeed=def_maxspeed/2;
 _acceleration=def_acceleration/2;
 }
 
if _moveType=1 { // Ladder:
 _gravity=0;
 _aircontrol=1;
 _maxspeed=def_maxspeed/8;
 _friction=0.95;
 }  

//*** MORALE BUFFS: *** (STUB) 

//*** BUFFS: ***
buf_execute();
buf_execute_vfx();

_maxspeed     *= mod_speed;
_climbSpeed   *= mod_speed;
_acceleration *= mod_speed;
_jumpPower    *= mod_jump;

_health += mod_hp / 60;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Actions

if _scriptStep&lt;&gt;0
 script_execute(_scriptStep);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement execution

switch (_moveMode) {

  case AI_MOVE.mm_inertial:
    ai_land_move_inertially();
    break;
  
  case AI_MOVE.mm_towards:
    ai_land_move_towards();
    break;
  
  case AI_MOVE.mm_away_from:
    ai_land_move_away_from();
    break;

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Step Actions (Secondary)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mask correction

if (_moveHeight == AI_MOVE.mh_normal &amp;&amp; mask_index != _maskDefault) {

  set_mask(_maskDefault);
  
  }
else if (_moveHeight = AI_MOVE.mh_crouch &amp;&amp; mask_index != _maskCrouch) {

  set_mask(_maskCrouch);
  
  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Primary)
var __eta, __dist, __spd;

//*********************************
if object_index=obj_ai_parent and
   _attackMode=0 begin
//*********************************


if _attackTimer&gt;-_attackSpeed {
 
 //Deal damage:
 if (instance_exists(_target) and _target&gt;0) {
  if (_attackTimer=0 and distance_to_object(_target)&lt;=_attackRange) {
  
   if (_target=global.player_obj_id) {
    player_damage(_attackDamage,_attackVKnock,_attackHKnock);
    screen_flash(c_red);
    }
    else {
     object_damage(_target,_attackDamage,_attackVKnock,_attackHKnock);
     }
   
   }
  }
 }
  
 else {
 
 //Try to attack:
 if (instance_exists(_target) and _target&gt;0) {

  //Estimate ETA:
  __eta=9999;
  __dist=9999;
  if collision_line(x,y,_tarX,_tarY,staticParObj,true,true)==noone {

   __dist=distance_to_object(_target)-_attackRange/2;
   __spd=abs(_hspeed-_target._hspeed);
  
   if __spd&lt;&gt;0
    __eta=ceil(__dist/__spd)+1;

   }
      
  //Start attack animation: 
  if (__eta&lt;_attackLength or __dist&lt;=_attackRange/2) {
   _attackTimer=_attackLength;  
   }
 
 }
  
}


//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Secondary)
var a,c,n,d,f,t;

//*********************************
if object_index=obj_ai_parent and
   _attackMode=1 begin
//*********************************

 c=collision_line(x,y,_target.x,_target.y,staticParObj,true,true)==noone;
 t=(instance_exists(_target) and _target&gt;0);

 //Weapon angle: 
 a=(_weaponAngle&gt;90 and _weaponAngle&lt;=270);
 
 if (image_xscale=1 and a=true) _weaponAngle=0
  else if (image_xscale=-1 and a=false) _weaponAngle=180;
  
 if (t=true) {

  //Needed angle:
  if c=true
   n=point_direction(x,y,_target.x,_target.y)
   else n=cpptern(image_xscale==1,0,-1);
  //Angle difference:
  d=angle_difference(n,_weaponAngle); 
  //Speed coefficient:
  f=min(1,abs(d)/_weaponRotSmooth);
  //Moving:
  if abs(d) &lt;= 1 _weaponAngle=n
   else {
   if d&gt;0 _weaponAngle+=_weaponRotSpeed*f else _weaponAngle-=_weaponRotSpeed*f;
   }
  //Angle correction:
  if _weaponAngle&gt;360 _weaponAngle-=360
   else if _weaponAngle&lt;0   _weaponAngle=360;    
   
  }
  
 //Firing:
 if (t=true and c=true and _attackTimerSec=-_attackSpeedSec) {
 
  var xx,yy,son;
      
  xx=x+x_rotated(_weaponXOffset,_weaponYOffset*image_xscale,_weaponAngle);
  yy=y+y_rotated(_weaponXOffset,_weaponYOffset*image_xscale,_weaponAngle);
      
  repeat (1) {
      
   /*son=instance_create(xx,yy,obj_projectile);
      
   son._direction=image_angle+random_range(-bl_scatter[mode_current],bl_scatter[mode_current])*(1.5-argument2/2);
   son.image_angle=son._direction;
   son._speed=bl_speed[ammo_current];
   son._sprite=bl_sprite[ammo_current];
            
   son.damage=bl_damage[ammo_current]*min((xdur/b_dur + 0.17)*2,1);     
   son.exp_radius=bl_expradius[ammo_current];
   son.exp_sprite=bl_expsprite[ammo_current];
   son.knockback=bl_knockback[ammo_current];
   son.dot=bl_dot[ammo_current];
   son.dot_type=bl_dot_type[ammo_current];
   son.arc=bl_arc[ammo_current];
       
   weapon_projectile_init(son,object_index,ammo_current,GROUP.friendly);*/
      
   }
 
  }

//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Set image

//*********************************
if object_index=obj_ai_parent begin
//*********************************


if _hspeed&lt;&gt;0 {
 if _grounded=false
  image_xscale=sign(_hspeed)
  else
   image_xscale=-1+(_tarX&gt;x)*2;
 }
 

//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finalize step

//*** DESTROY: ***
if (_health &lt;= 0) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_ai_parent">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Push out other bodies
var __int=_density;

if other._grounded=1
 other._hspeed+=__int*dcos(point_direction(x,y,other.x,other.y));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back up resources

buf_instance_backup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Draw self

//STUB


draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,0.5);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,tern(_moveHeight,1,0.5,1),1,c_white,1);

if _attackTimer&gt;=0
 draw_sprite_ext(mask_index,0,x,y,1,1,0,c_yellow,0.5);
 
draw_text(x,y,string(_attackTimer)+"#"+string(_health));


//draw_circle(x,y-_eyesY,4,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
