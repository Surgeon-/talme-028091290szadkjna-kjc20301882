<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ctrl_game</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic setup
scroll=0;

//Frameskipping:
_draw=true;

//Blur &amp; Bloom:
blurRadius=0;

bloomIntensity=0;
bloomRadius=0;
bloomOvrIntensity=0;
bloomOvrRadius=0;

application_surface_draw_enable(false);
auxSurf = surface_create(surface_get_width(application_surface),
                         surface_get_height(application_surface));

//Info:
_infoY=-32;
_infoA=0;
_infoScroll=0;

for (var i=1; i&lt;=GUI.max_msg; i+=1) begin
 _infoMsg[i,0]="";
 _infoMsg[i,1]=c_white;
end;

//Window resize:
_drawX=0;
_drawY=0;
_windowW_1=window_get_width();
_windowW_2=_windowW_1;
_windowH_1=window_get_height();
_windowH_2=_windowH_1;
window_set_min_height(180*2);
window_set_min_width(320*2);

//Other:
hud_scale = 2;

_mouseHudPos=0;
_hudOffset=1.5;
_heartFrame=0;
//display_set_gui_maximise(gui_get_scale(),gui_get_scale(),0,0);
//_string="HG_world_lighting_set_ambient(-1,0.5,make_colour_rgb(255,255,255));";
_string = "";
_reloadStatePrev=0;
_roomGoto=room_menu;
sett_update_settings();





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles Step

if (!_dc) {

 ptc_update();
 
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI window open check

if instance_exists(obj_gui_armour_repair_vendor)=true
or instance_exists(obj_gui_repair_vendor)=true
or instance_exists(obj_gui_armour_repair)=true
or instance_exists(obj_gui_entry_input)=true
or instance_exists(obj_gui_disassemble)=true
or instance_exists(obj_gui_load_game)=true
or instance_exists(obj_gui_inventory)=true
or instance_exists(obj_gui_settings)=true
or instance_exists(obj_gui_crafting)=true
or instance_exists(obj_gui_journal)=true
or instance_exists(obj_gui_barter)=true
or instance_exists(obj_gui_repair)=true
or instance_exists(obj_gui_pause)=true
//or instance_exists(obj_textbox)=true //Dialogues happen in scenes, not pauses
 _dc=true
 else
  _dc=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pausing

if !(_dc) {

 if (keyboard_check_pressed(userControls[KEYBOARD.pause])==true and
     !txt_obj_exists()) 
  instance_create(x,y,obj_gui_pause);
  
 }
 
if os_is_paused()=true
 io_clear();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse position

_mouseHudPos=gui_set_mouse_in_hud();

if (_mouseHudPos=0 or _dc=true)
 window_set_cursor(cr_default);
 else window_set_cursor(cr_handpoint);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other

screen_set_bloom_override(0,0);
pnc_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window resizing

_windowW_2=_windowW_1;
_windowW_1=window_get_width();

_windowH_2=_windowH_1;
_windowH_1=window_get_height();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global effects

if !game_paused() {
 
 //Info box:
 if _infoA&gt;0 _infoA-=1;

 //Heart:
 if (room&lt;&gt;room_hospital)
   heart_execute();
 
 //Damage over Time:
 //dot_execute();
 
 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Frameskipping

if (_draw=false &amp;&amp;
    _dc=false &amp;&amp;
    fps&lt;=room_speed-2 &amp;&amp;
    sett_get_value("Frame skipping")="On")
 draw_enable_drawevent(false)
 else
  draw_enable_drawevent(true);

_draw=!_draw;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD

//Heart:
_heartFrame=(_heartFrame+0.2) mod (sprite_get_number(spr_heart));

//Offset:

if (!global.scene_active) {

 //Not in scene:
 
 if (_hudOffset&lt;0.003) {
 
 _hudOffset=0;
  
  } else if (_hudOffset&gt;0) {
  
   if (!instance_exists(obj_initializer))
    _hudOffset *= 0.90;
   
   }
  
 }
 else {
 
  //In scene:
 
  if (_hudOffset&lt;1.5)
   _hudOffset+=0.05;
 
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw application surface

if (!surface_exists(auxSurf))
 auxSurf=surface_create(surface_get_width(application_surface),
                        surface_get_height(application_surface));

if (surface_exists(auxSurf) and surface_exists(application_surface)) {
 
 //Apply blur if needed:
 switch (sign(blurRadius)) begin

  case 0:
    draw_set_colour(c_black);
    draw_set_alpha(1);
    draw_rectangle(0,0,window_get_width(),window_get_height(),false);
   
    surface_set_target(auxSurf);
   
     draw_surface(application_surface,0,0);
    
    surface_reset_target();
   break;

  case 1:    
    draw_set_colour(c_black);
    draw_set_alpha(1);
    draw_rectangle(0,0,window_get_width(),window_get_height(),false);
   
    shader_set(sh_gauss);
    
    shader_set_uniform_f(global.sha_gauss_sigma,blurRadius*0.2);
    shader_set_uniform_f(global.sha_gauss_blurSize,1.0/360);

    surface_set_target(auxSurf);
   
     draw_surface(application_surface,0,0);
    
    surface_reset_target();

    shader_reset();
   break;
  
  default:
   break;
  
 end;

 //Apply bloom if needed:
 switch (sign(max(bloomIntensity,bloomOvrIntensity))) begin

  case 0:
    draw_surface(auxSurf,_drawX,_drawY);
   break;
   
  case 1:
    var uScale, uIntensity, texScreen, texBase;
    
    uScale=shader_get_uniform(sh_bloom,"uScale");
    uIntensity=shader_get_uniform(sh_bloom,"uIntensity");
    texScreen=surface_get_texture(auxSurf);
    texPass=surface_get_texture(application_surface); 
    
    shader_set(sh_bloom);
    
     surface_set_target(application_surface);
      draw_clear_alpha(c_black,0.0);
      shader_set_uniform_f(uIntensity,1+max(bloomIntensity,bloomOvrIntensity));
      shader_set_uniform_f(uScale,texture_get_texel_width(texScreen)*max(bloomRadius,bloomOvrRadius),0.0);
      draw_surface_ext(auxSurf,0,0,1,1,0,c_white,1);
     surface_reset_target();
  
     draw_set_blend_mode_ext(bm_src_alpha, bm_one);
      shader_set_uniform_f(uScale,0.0,texture_get_texel_height(texPass)*max(bloomRadius,bloomOvrRadius));
      draw_surface(application_surface,_drawX,_drawY);
     draw_set_blend_mode(bm_normal);
     
    shader_reset();
    
   break;

  default:
   break;
  
 end;
 
 }
 else {
 
  var s="Not enough Video Memory!",sw=string_width(s);
 
  draw_set_colour(c_black);
  draw_rectangle(0,0,_drawX+window_get_width(),_drawY+window_get_height(),false);
                 
  draw_set_colour(c_red);
  draw_set_valign(fa_center);
  draw_set_halign(fa_center);
  draw_text(_drawX+window_get_width()/2,_drawY+window_get_height()/2,s);
 
  }





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw tooltip

if (game_is_initialized())
  pnc_draw_tooltip(sett_get_value("Tooltip position")=="Fixed");

/*if (!ds_exists(global.sett_map, ds_type_map)) {
//if (!game_is_initialized()) {

  show_message("sett_map = " + string(global.sett_map));
  show_message("svld_string = " + global.svld_string);
  show_message("game_init_flag = " + string(global.game_init_flag));

  }*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ABS-END Actions

switch (global.abs_end_action) begin

 case ABSEND.doNothing:
  break;
  
 case ABSEND.returnToMenu:   
   game_cleanup();
   global.abs_end_action = 0;
   room_goto(room_menu); 
  break;
  
 case ABSEND.roomGoto:
   game_cleanup();   
   global.abs_end_action = 0;
   room_goto(_roomGoto);
  break;
  
 case ABSEND.endGame:
   game_cleanup();
   game_end();
  break; 
  
 case ABSEND.saveChkpt:
  global.abs_end_action = 0;
  game_checkpoint_save();
  break;
  
 case ABSEND.loadChkpt:
  // Maybe not needed? STUB
  break; 
  
 default:
  break;

end;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update splats

spl_tick(view_xview,view_yview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD
var i,xx,yy,hpd,std,ard,spr,str,alp;

//Set up debug X and Y:
if (0) {
 xx=gui_width()/2;
 yy=gui_height()/2; 

 //Debug lines:
 draw_set_color(c_red);
 draw_line(0,0,xx,yy);
 draw_line(0,gui_height(),xx,yy);
 draw_line(gui_width(),0,xx,yy);
 draw_line(gui_width(),gui_height(),xx,yy); 

 draw_sprite(placeholderSpr,0,device_mouse_raw_x(0)/gui_get_scale(),device_mouse_raw_y(0)/gui_get_scale());
 }

//-------------------------------------------------------------------------------------------------------------

//Set up HUD X and Y:
xx=gui_width()/2-sprite_get_width(spr_hud_2)*hud_scale/2;
yy=gui_height()-sprite_get_height(spr_hud_2)*hud_scale;
 yy+=sprite_get_height(spr_hud_2)*hud_scale*(_hudOffset);

//Draw HUD sprite:
draw_sprite_ext(spr_hud_2,0,xx,yy,hud_scale,hud_scale,0,c_white,1);

//Stamina and Health:
std=((global.player_obj_id)._stamina/PLAYER.topStamina);
gui_draw_bar(spr_hud_stamina_2,0,xx+386,yy+62,std,true);

hpd=((global.player_obj_id)._health/PLAYER.topHealth);
gui_draw_bar(spr_hud_health_2,0,xx+250,yy+62,hpd,false);

ard=((global.player_obj_id)._armour/PLAYER.topHealth);
gui_draw_bar(spr_hud_armour,0,xx+250,yy+62,ard,false);

//-------------------------------------------------------------------------------------------------------------

//Set up Heart X and Y:
xx=gui_width()/2-0.75*sprite_get_width(spr_heart)*hud_scale/2;
yy=gui_height()-0.75*sprite_get_height(spr_heart)*hud_scale-10;
 yy+=sprite_get_height(spr_hud_2)*(_hudOffset)*hud_scale;

//Draw Heart:
draw_sprite_ext(spr_heart,_heartFrame,xx,yy,0.75*hud_scale,0.75*hud_scale,1,c_white,1);

//heart_debug_draw(32,32);

//-------------------------------------------------------------------------------------------------------------

//Set up Battery X and Y:
xx=gui_width()/2+sprite_get_width(spr_hud_2)*hud_scale/2+8;
yy=gui_height()-58;
 yy+=sprite_get_height(spr_hud_2)*hud_scale*(_hudOffset);

draw_sprite_ext(spr_hud_battery,(global.player_obj_id)._defib,xx,yy,hud_scale,hud_scale,0,c_white,1);

//-------------------------------------------------------------------------------------------------------------

//Set up quick items' X and Y:
//xx=-sprite_get_width(spr_item_default)*(_hudOffset);
//yy=gui_height()-42+sprite_get_height(spr_item_default)*(_hudOffset);
xx=-34*(_hudOffset)*hud_scale;
yy=gui_height()-84+34*(_hudOffset)*hud_scale;

//Draw quick items:
counter=0;
repeat (5) begin
 counter+=1;
 if global.inventory_quick[counter,1]="ZZZZZ" spr=spr_item_default
  else spr=real(inv_item_get_static_value(global.inventory_quick[counter,1],7));
 
 draw_sprite_ext(spr,0,xx+8+(counter-1)*84,yy,hud_scale,hud_scale,0,c_white,1);

end;

draw_set_color(c_white);
draw_set_alpha(0.3);
draw_rectangle(xx+8+(global.inventory_active-1)*84,
               yy,
               xx+84+(global.inventory_active-1)*84,
               yy+76,
               false);
draw_set_alpha(1);

//-------------------------------------------------------------------------------------------------------------

//Draw Equip info:
fnt_draw_set(FONT.window);
draw_set_color(c_black);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_alpha(1);

if instance_exists(weaponHoldingPar) {

 xx=gui_width()-sprite_get_width(spr_equip_info);
  xx+=sprite_get_width(spr_equip_info)*(_hudOffset);
 yy=gui_height()-sprite_get_height(spr_equip_info);
  yy+=sprite_get_height(spr_equip_info)*(_hudOffset);

 draw_sprite(spr_equip_info,0,xx,yy);

 var str,ammo,ammo_max,ammo_inv,ammo_name,dur,dur_max,frm,rld;
 
 ammo=weaponHoldingPar.xammo;
 ammo_max=weaponHoldingPar.b_clipsize;
 ammo_inv=inv_count_item(weaponHoldingPar.bl_name[weaponHoldingPar.ammo_current]);
 ammo_name=weaponHoldingPar.bl_name[weaponHoldingPar.ammo_current];
 
 dur=round(weaponHoldingPar.xdur);
 dur_max=round(weaponHoldingPar.b_dur);
 
 frm=weaponHoldingPar.fm_name[weaponHoldingPar.mode_current];
 rld=1-weaponHoldingPar.reloading/(weaponHoldingPar.b_reloadtime-1);
  
 str=global.inventory_quick[weaponHoldingPar.patron,1];
 if string_length(str)&gt;20
   str=string_copy(str,1,17)+"...";
    
 draw_text(xx+4,yy+2,str);
 
 if inv_count_item(ammo_name)&lt;1 and weaponHoldingPar.xammo&lt;1
  draw_text(xx+17,yy+19,"No ammo left!")
  else
   draw_text(xx+17,yy+19,string(ammo)+"/"+string(ammo_inv)+cpptern(weaponHoldingPar.b_state=1," [Reloading]",""));
   
 draw_text(xx+17,yy+44,"-"+ammo_name);
 draw_text(xx+17,yy+57,"-"+frm);
 
 if ammo&gt;0 {
  gui_draw_bar(spr_reload_bar,1,xx+17,yy+34,1,true);
  gui_draw_bar(spr_reload_bar,0,xx+17,yy+34,ammo/ammo_max,true);
  }
  else if (weaponHoldingPar.b_state=1) {
   gui_draw_bar(spr_reload_bar,1,xx+17,yy+34,rld+1,true);
   gui_draw_bar(spr_reload_bar,0,xx+17,yy+34,rld,true);
   cha_draw_channel_bar("Reloading...",rld);
   }
   
 gui_draw_bar(spr_dur_bar,0,xx+17,yy+81,dur/dur_max,true);
 
 }
 else if global.inventory_quick[global.inventory_active,1]&lt;&gt;"ZZZZZ" {
 
  xx=gui_width()-sprite_get_width(spr_equip_info);
   xx+=20*(_hudOffset);
  yy=gui_height()-20;
   yy+=20*(_hudOffset);
  
  var str,str1,str2;
  
  str1=global.inventory_quick[global.inventory_active,1];
  str2=global.inventory_quick[global.inventory_active,3];
   if str2&gt;1 str2=" ("+string(str2)+")"
    else str2="";
  
  if string_length(str1+str2)&gt;15
   str=string_copy(str1,1,15-string_length(str2))+"... "+str2;
   else str=str1+str2;

  draw_sprite(spr_equip_info,0,xx,yy);
  
  draw_text(xx+4,yy+2,str);
  
  }
  else {
  
   xx=gui_width()-sprite_get_width(spr_equip_info);
    xx+=20*(_hudOffset);
   yy=gui_height()-20;
    yy+=20*(_hudOffset);

   draw_sprite(spr_equip_info,0,xx,yy);
  
   draw_text(xx+4,yy+2,"No item equipped.");
   
   }

//-------------------------------------------------------------------------------------------------------------

//Set up top left display X and Y:
if (gui_get_mouse_in_hud()==1) {
 if _infoY&lt;0 _infoY+=8;
 }
 else if _infoY&gt;-64 _infoY-=8;
 
xx=-sprite_get_height(spr_hud_info)*hud_scale*(_hudOffset);
yy=_infoY-sprite_get_height(spr_hud_info)*hud_scale*(_hudOffset);

alp=clamp(_infoA/50,sett_get_value("Info Box Opacity")/100,1);
 
draw_sprite_ext(spr_hud_info,0,xx,yy,hud_scale,hud_scale,0,c_white,1);
draw_sprite_ext(spr_hud_info,1,xx,yy,hud_scale,hud_scale,0,c_white,alp);
 
//Draw messages:
draw_set_halign(fa_left);
draw_set_valign(fa_top);

for (i=8; i&gt;=1; i-=1) begin

 draw_set_colour(_infoMsg[9-i+_infoScroll,1]);
 draw_set_alpha(_infoA/50);
 draw_text(xx+36,yy+64+(i-1)*24,_infoMsg[9-i+_infoScroll,0]);

end;

draw_set_alpha(1);

//Draw buttons:
if _infoY&gt;-64 {

 if gui_draw_sprite_clickable_ext(spr_hud_info_buttons,0,xx+4,yy+64,true,hud_scale,hud_scale,1)=true
 or mouse_wheel_up()=true {
  _infoScroll=clamp(_infoScroll+1,0,56);
  _infoA=GUI.max_alp;
  }
  
 if gui_draw_sprite_clickable_ext(spr_hud_info_buttons,1,xx+4,yy+106,true,hud_scale,hud_scale,1)=true
 or mouse_wheel_down()=true {
  _infoScroll=clamp(_infoScroll-1,0,56);
  _infoA=GUI.max_alp;
  }

 if gui_draw_sprite_clickable_ext(spr_hud_info_buttons,2,xx+4,yy+148,true,hud_scale,hud_scale,1)=true {
  _infoScroll=0;
  _infoA=GUI.max_alp;
  }

  
 if gui_draw_sprite_clickable_ext(spr_hud_info_big_buttons,0,xx+6,yy+6,true,hud_scale,hud_scale,1,"Pause Menu")=true {
  //Pause menu
  instance_create(x,y,obj_gui_pause);
  }
  
 if gui_draw_sprite_clickable_ext(spr_hud_info_big_buttons,1,xx+64,yy+6,true,hud_scale,hud_scale,1)=true {
  //Save
  //gui_show_message("Can't save right now.",c_maroon,true);
  set_abs_end_action(ABSEND.saveChkpt);
  //game_checkpoint_save();
  //gui_show_message_ext("Game saved (Slot "+string(global.game_slot)+").",c_black);
  }
  
 if gui_draw_sprite_clickable_ext(spr_hud_info_big_buttons,2,xx+114,yy+6,true,hud_scale,hud_scale,1)=true {
  //Load
  //gui_show_message("Can't load right now.",c_maroon,true);
  game_checkpoint_load();
  }
  
 if gui_draw_sprite_clickable_ext(spr_hud_info_big_buttons,3,xx+172,yy+6,true,hud_scale,hud_scale,1,"Open Inventory")=true {
  //Inventory
  instance_create(x,y,obj_gui_inventory);
  }
  
 if gui_draw_sprite_clickable_ext(spr_hud_info_big_buttons,4,xx+222,yy+6,true,hud_scale,hud_scale,1,"Open Journal")=true {
  //Journal
  instance_create(x,y,obj_gui_journal);
  }
  
 if gui_draw_sprite_clickable_ext(spr_hud_info_big_buttons,5,xx+272,yy+6,true,hud_scale,hud_scale,1,"Open Crafting")=true {
  //Crafting
  instance_create(x,y,obj_gui_crafting);
  }
  
 }

//-------------------------------------------------------------------------------------------------------------
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Darken screen

draw_set_colour(c_black);
draw_set_alpha(0.75);
draw_rectangle(0,0,gui_width(),gui_height(),false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI resize
//This is needed because of the manual window resize feature.

if (_windowW_1==_windowW_2 or _windowH_1==_windowH_2) and
   (!keyboard_check_pressed(userControls[KEYBOARD.refresh])) {}
   
 else {

  gui_refresh();
  
  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Splats &amp; other
spl_draw_system(view_xview,view_yview);

/*draw_set_alpha(0.35);
mp_grid_draw(global.pfd_grid);
draw_set_alpha(1);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP - Console

var s=get_string("Input a string to execute:",_string);

NSP_execute_string(s);

_string=s;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP - Debug overlay

if game_paused() exit;

show_debug_overlay(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
