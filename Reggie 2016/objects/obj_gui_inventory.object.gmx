<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_inventory</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic variables setup:
scroll = 0;
selected = -1;
type = 0;

sprite_scale = 2;

desc_scroll = 0;

desc_lines = 1;
desc_max_lines = 20;
desc_text_grid = -1;

//inv_refresh();

// New:
list_array[14, 2] = 0;

item_types[0] = RINV_TYPE.any;
item_types[1] = RINV_TYPE.bulk;
item_types[2] = RINV_TYPE.ammo;
item_types[3] = RINV_TYPE.consumable;
item_types[4] = RINV_TYPE.weapon;
item_types[5] = RINV_TYPE.armour;
item_types[6] = RINV_TYPE.special;

types_cnt = 7;

ev_update_list = 0;
ev_update_desc = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (desc_text_grid != -1) {

  TPP_text_free(desc_text_grid);
  
  desc_text_grid = -1;
  
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Closing:
if (keyboard_check_pressed(userControls[KEYBOARD.pause]))
  instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((device_mouse_raw_x(0)-40)/gui_get_scale() &lt; gui_width()/2) {

  var slot_cnt = rinv_count_slots(-1, item_types[type])

  if (scroll &lt; slot_cnt - 15) scroll += 1;
 
  }
else {
 
  if (desc_scroll &lt; (desc_lines - desc_max_lines) and selected != -1) {
  
    desc_scroll += 1;
    
    event_user(ev_update_desc);
   
    }
   
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((device_mouse_raw_x(0)-40)/gui_get_scale() &lt; gui_width()/2) {

 if (scroll &gt; 0) scroll -= 1;
 
 }
 else {
 
  if (desc_scroll &gt; 0 and selected != -1){
  
   desc_scroll -= 1;
   
   event_user(ev_update_desc);
   
   } 
  
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update description

if (selected == -1) exit;

var static_id = rinv_local_to_static(-1, selected);

var itt = rinv_item_get_static_value(static_id, RINV_STATIC.type);

var orig_desc = rinv_item_get_static_value(static_id, RINV_STATIC.desc);

if (itt == INV_TYPE.weapon) { // Weapon
 
  var name = rinv_item_get_static_value(static_id, RINV_STATIC.name),
      xdur = round(rinv_item_get_dynamic_value(-1, selected, WPTRN.xdur)),
      maxdur = wpn_sys_get_max_dur(name),
      xammo = rinv_item_get_dynamic_value(-1, selected, WPTRN.xammo),
      maxammo = wpn_sys_get_max_ammo(name),
      amt_name = wpn_sys_get_amt_name(name, rinv_item_get_dynamic_value(-1, selected, WPTRN.ammo_curr));
  
  orig_desc = "-Weapon-\n\n"
            + "Durability:\n"
            + "  " + string(xdur) + "/" + string(maxdur) + "\n"
            + "Ammo:\n"
            + "  " + string(xammo) + "/" + string(maxammo) + " (" + amt_name
            + ")\n  [lnk:do_unload:[col:blue:[Unload Ammo\]]]"
            + "\n\n" + orig_desc;
                 
  }
else if (itt == INV_TYPE.armour) { // Armour

  /*orig_desc = "-Armour-\nDurability: "
            + string(round(global.inventory_armour[4]))+"/"+string(armour_max_dur(name))
            + "\n" + "Protection: " + string(round(global.inventory_armour[4]*armour_get_ratio(name)))
            + " HP" + "\n\n"
            + orig_desc;*/ // TEMP STUB
            
  orig_desc = "-Armour-\n\n" + orig_desc;
            
  }
else { // Other

   orig_desc = "-Item-\n\n" + orig_desc;
   
   }

if (desc_text_grid != -1) TPP_text_free(desc_text_grid);

desc_text_grid = TPP_text_parse(orig_desc, c_black, 1, fnt_get(FONT.window), fa_top, 275, 22, 2);

desc_lines = TPP_text_get_lines(desc_text_grid);
 

 
 
 
 
 
 
 
 
 
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update list
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a, l, i, spr, str, itt, refresh, new_scroll, found;

var tlerp = (sett_get_value("Interpolation") == "On");

fnt_draw_set(FONT.window);

//Set up GUI x and y:
xx = gui_width()/2-sprite_get_width(sprite_index)*sprite_scale/2;
yy = gui_height()/2-sprite_get_height(sprite_index)*sprite_scale/2;

//Draw own sprite:
draw_sprite_ext(spr_window_inventory,0,xx,yy,sprite_scale,sprite_scale,0,c_white,1);

//ITEM LIST::
draw_set_alpha(1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

found = rinv_list_items(-1, item_types[type], 6, 15, scroll, list_array);
counter = 0;

//LOOP BEGIN:
for (i = 0; i &lt; found; i += 1) {

  //Small icons:
  spr = rinv_item_get_static_value(list_array[i, 0], RINV_STATIC.icon);
  draw_sprite_ext(spr, 0, xx+18, yy+i*40+126, 1, 1, 0, c_white, 1); 
  
  //Clickable text boxes:
  var ind = cpptern(list_array[i, 1] == selected, 1, 0);
  
  if (gui_draw_sprite_clickable_ext(spr_window_name_box, ind, xx+58, yy+i*40+126, 1, 2, 2, 1)) {
  
    selected = list_array[i, 1];
    
    event_user(ev_update_desc);
    
    desc_scroll = 0;
    
    }
  
  //Item names and quantities/HP:
  draw_set_color(c_black);
  
  str = rinv_item_get_static_value(list_array[i, 0], RINV_STATIC.name);
  
  if (string_length(str) &gt; 15)
    str = string_copy(str, 1, 15) + "...";
    
  itt = rinv_item_get_static_value(list_array[i, 0], RINV_STATIC.type);
   
  if (itt == RINV_TYPE.armour) {
    //str+=" ("+string(round(global.inventory_current[global.inventory_list[counter],4]))+" DR)"; STUB
    }
  else if (itt == INV_TYPE.weapon) {
    //str+=" ("+string(round(global.inventory_current[global.inventory_list[counter],6]))+" DR)"; STUB
    }
  else if (list_array[i, 2] &gt; 1) {
    str += " (" + string(list_array[i, 2]) + ")";
    }
     
   ftlerp();
   draw_text(xx+64, yy+130+i*40, str);
   rtlerp(tlerp);
   
  //Equip buttons:
  if (gui_draw_sprite_clickable(spr_window_button_quick, 0, xx+416, yy+i*40+126, 1, "Equip item")) {
  
    if (itt != RINV_TYPE.armour) {
    
      var lq = rinv_lowest_null_slot(0, 4);
      
      if (lq != -1) {
      
        rinv_swap_items(-1, list_array[i, 1], lq);
        
        if (selected == list_array[i, 1]) {
        
          selected = lq;
          
          event_user(ev_update_desc);
        
          }
          
        var static_id = rinv_local_to_static(-1, lq);
          
        if (global.rinv_active_slot == lq &amp;&amp;
            rinv_item_get_static_value(static_id, RINV_STATIC.objwe) != -1) {
            
          player_update_hands();
        
          }
      
        }
    
      }
    else {
    
      if (rinv_item_is_null(-1, 5)) {
      
        rinv_swap_items(-1, list_array[i, 1], 5);
        
        if (selected == list_array[i, 1]) {
        
          selected = 5;
          
          event_user(ev_update_desc);
        
          }
      
        }
    
      }
     
    }
   
  }
//LOOP END;

//QUICK ITEMS:
for (i = 0; i &lt; 5; i += 1) {

  if (!rinv_item_is_null(-1, i)) {
  
    var static_id = rinv_local_to_static(-1, i);
  
    var spr = rinv_item_get_static_value(static_id, RINV_STATIC.icon);
  
    if (gui_draw_sprite_clickable_ext(spr, 0, xx+14+i*96, yy+785, true, 27/19, 27/19, 1)) {
    
      selected = i;
      
      desc_scroll = 0;
      
      event_user(ev_update_desc);
      
      }
    
    if (i == selected) draw_sprite_ext(spr_checkered_square, 0, xx+14+i*96, yy+786, 2, 2, 0, c_white, 1);
      
    if (gui_draw_sprite_clickable(spr_window_button_quick, 1, xx+68+i*96, yy+792, true, "Unequip item")) {
    
      var new = rinv_add_empty_slot(-1);
      
      rinv_swap_items(-1, new, i);
      
      if (selected == i) {
      
        selected = new;
        
        event_user(ev_update_desc);
      
        }
      
      }
    
    }

  }

if (!rinv_item_is_null(-1, 5)) {

  static_id = rinv_local_to_static(-1, 5);
  
  spr = rinv_item_get_static_value(static_id, RINV_STATIC.icon);

  if (gui_draw_sprite_clickable_ext(spr,0,xx+496,yy+780,true,27/19,27/19,1)) {
  
    selected = 5;
    desc_scroll = 0;
    event_user(ev_update_desc);
    
    }
    
  if (selected = 5) draw_sprite_ext(spr_checkered_square,0,xx+496,yy+780,2,2,0,c_white,1);
  
  }
 
//Filter title:
draw_set_color(c_black);

ftlerp();
switch (item_types[type]) begin

  case RINV_TYPE.any:
    draw_text(xx+24, yy+88, "Showing: All"); break;
  
  case RINV_TYPE.bulk:
    draw_text(xx+24, yy+88, "Showing: Bulk"); break;
  
  case RINV_TYPE.weapon:
    draw_text(xx+24, yy+88, "Showing: Weapons"); break;
  
  case RINV_TYPE.consumable:
    draw_text(xx+24, yy+88, "Showing: Consumables"); break;
  
  case RINV_TYPE.ammo:
    draw_text(xx+24, yy+88, "Showing: Ammo"); break;
   
  case RINV_TYPE.armour:
    draw_text(xx+24, yy+88, "Showing: Apparel"); break;

  case RINV_TYPE.special:
    draw_text(xx+24, yy+88, "Showing: Special"); break;
    
  default:
    break;

end;
rtlerp(tlerp);

//Type filter buttons:
if (gui_draw_sprite_clickable(spr_window_button_filter, 0, xx+416, yy+80, 1, "Change filter")) {
  type -= 1;
  if (type == -1)
     type = types_cnt - 1;
  scroll = 0;
  }

if (gui_draw_sprite_clickable(spr_window_button_filter, 1, xx+450, yy+80, 1, "Change filter")) {
  type = (type + 1) mod types_cnt;
  scroll = 0;
  }

//SELECTED ITEM DETAILS BEGIN:
if (selected != -1) {

  var static_id = rinv_local_to_static(-1, selected);

  //Item name:
  draw_set_color(c_black);
  
  str = rinv_item_get_static_value(static_id, RINV_STATIC.name)
      + " (" + string( rinv_item_get_amount(-1, selected) ) + ")";
  
  ftlerp();
  draw_text(xx+504, yy+84, str);
  rtlerp(tlerp);

  //Item icon:
  spr = rinv_item_get_static_value(static_id, RINV_STATIC.icon);
  
  if (gui_draw_sprite_hover_scale(spr, 0, xx+740, yy+134, 2, 2)) {
    pnc_set_tooltip(id, str);
    }
    
  //Weight:
  var amnt = rinv_item_get_amount(-1, selected);
  var wt_singular = rinv_item_get_static_value(static_id, RINV_STATIC.weight);
  
  str = "Weight: " + string(amnt * wt_singular) + "#"
      + "(" + string(wt_singular) + " per item)";
  
  draw_set_colour(c_black);
      
  draw_text(xx + 508, yy + 140, str);
      
  //Description:  
  if (desc_text_grid != -1) {
  
    TPP_set_cursor(device_mouse_raw_x(0)/gui_get_scale(),
                   device_mouse_raw_y(0)/gui_get_scale(),
                   mouse_check_button(mb_left));
  
    TPP_link_clear_hover();
                   
    ftlerp();
    var rv = TPP_text_print_ext_part(xx+508, yy+224, desc_text_grid, fa_left, fa_top, desc_scroll+1, desc_scroll+1+desc_max_lines);
    rtlerp(tlerp);
  
    // For weapons only:
    if (rv == "do_unload") {
    
      var static_id = rinv_local_to_static(-1, selected);
    
      var name = rinv_item_get_static_value(static_id, RINV_STATIC.name),
          xammo = rinv_item_get_dynamic_value(-1, selected, WPTRN.xammo),
          amt_name = wpn_sys_get_amt_name(name, rinv_item_get_dynamic_value(-1, selected, WPTRN.ammo_curr));
    
      if (xammo &gt; 0) {
      
        rinv_item_set_dynamic_value(-1, selected, WPTRN.xammo, 0);
        
        rinv_add_simple(-1, amt_name, xammo);
        
        if (global.rinv_active_slot == selected)
          player_update_hands();
      
        event_user(ev_update_desc);
          
        }
          
      }
    
    }
  
  //Item options buttons:    
  itt = rinv_item_get_static_value(static_id, RINV_STATIC.type);

  if (itt == RINV_TYPE.weapon or itt == RINV_TYPE.armour) {

    //If it's weapon or armour:
    if (gui_draw_sprite_clickable_ext(spr_window_button_action,0,xx+508,yy+738,true,2,2,1)) { // Drop
    
      pspec_drop_item(-1, selected, (global.player_obj_id).x, (global.player_obj_id).y);
     
      if (rinv_item_is_null(-1, selected)) selected = -1;
     
      }
      
    if (gui_draw_sprite_clickable_ext(spr_window_button_action,2,xx+658,yy+738,true,2,2,1)) { // repair
  
      if (itt = RINV_TYPE.weapon) {
        a = instance_create(x,y,obj_gui_repair);
        a.target = selected;
        instance_destroy();
        }
       else {
         a = instance_create(x,y,obj_gui_armour_repair);
         a.target = selected;
         instance_destroy();   
         }
       
      }
 
    }
  else {
  
    //If it's not weapon or armour:
    if (gui_draw_sprite_clickable_ext(spr_window_button_action,0,xx+508,yy+738,true,2,2,1)) {
    
     pspec_drop_item(-1, selected, (global.player_obj_id).x, (global.player_obj_id).y);
     
     if (rinv_item_is_null(-1, selected)) selected = -1;
      
     }
     
    if (gui_draw_sprite_clickable_ext(spr_window_button_action,1,xx+658,yy+738,true,2,2,1)) {
    
     pspec_rinv_use_item(-1, selected);
     
     if (rinv_item_is_null(-1, selected)) selected = -1;
     
     }
    
    }

  //Mutual equip/unequip button:
  if (selected &lt;= 5) { // Unequip button
  
    if (gui_draw_sprite_clickable_ext(spr_window_button_equip, 1, xx+508, yy+698, true, 2, 2, 1)) {
  
      var new = rinv_add_empty_slot(-1);
      
      rinv_swap_items(-1, new, selected);
      
      selected = new;
      
      event_user(ev_update_desc);
    
      }
  
    }
  else { // Equip button
  
    if (gui_draw_sprite_clickable_ext(spr_window_button_equip, 0, xx+508, yy+698, true, 2, 2, 1)) {
  
      var static_id = rinv_local_to_static(-1, selected);
      
      var iit = rinv_item_get_static_value(static_id, RINV_STATIC.type);
      
      if (iit != RINV_TYPE.armour) { // Not armour
      
        var lq = rinv_lowest_null_slot(0, 4);
        
        if (lq != -1) {
        
          rinv_swap_items(-1, selected, lq);
          
          selected = lq;
          
          event_user(ev_update_desc);
        
          }
        
        }
      else { // Armour
      
        // STUB
      
        }
    
      }
  
    }
  
  /*
  ...
  //If it's armour:
  if (global.inventory_armour[1]=="ZZZZZ") {  
    cha_start("Equipping armour...",PLAYER.armourEqTime,false,"inv_equip_armour",selected);
    mouse_clear(mb_left);
    instance_destroy();
    }
  ...
  */

  //Desc scroll buttons:
  if (gui_draw_sprite_clickable(spr_window_button_scroll, 0, xx+790, yy+226, true)) {
  
    if (desc_scroll &gt; 0) {
      desc_scroll -= 1;
      update_desc = true;
      }
      
    }
 
  if (gui_draw_sprite_clickable(spr_window_button_scroll, 1, xx+790, yy+647, true)) {
  
    if (desc_scroll &lt; desc_lines - desc_max_lines) {
      desc_scroll += 1;
      update_desc = true;
      }
      
    }
 
  //Desc scroll bar:
  new_scroll = gui_draw_scroll_bar(xx+792, yy+266, xx+810, yy+644, desc_lines, desc_max_lines, desc_scroll, placeholderSpr);
  
  if (new_scroll != desc_scroll) {
   desc_scroll = new_scroll;
   update_desc = true;
   }

  }
//SELECTED ITEM DETAILS END;
  
//Scroll buttons:
var slot_cnt = rinv_count_slots(-1, item_types[type]);

if (keyboard_check_pressed(ord("K"))) {
  show_debug_message("Slot count = " + string(slot_cnt));
  }

if (gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+460,yy+126,true)) {
  if (scroll &gt; 0)
    scroll -= 1;
  }
   
if (gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+460,yy+688,true)) {
  if (scroll &lt; slot_cnt - 15)
    scroll += 1;
  }
 
//Scroll bar:
scroll = gui_draw_scroll_bar(xx+460, yy+166, xx+480, yy+682, slot_cnt, 15, scroll, placeholderSpr);

//Manual sorting buttons:
if (gui_draw_sprite_clickable(spr_window_button_msort_2, 0, xx+18, yy+728, true, "Move up/left")) {

  if (selected &lt;= 4) {
  
    if (selected &gt; 0) {
    
      rinv_swap_items(-1, selected, selected - 1);
      
      selected -= 1;
      
      event_user(ev_update_desc);
    
      if (global.rinv_active_slot == selected ||
          global.rinv_active_slot == selected + 1) {
        
        player_update_hands();
      
        }
      
      }
      
    }
  else {
  
    if (selected != -1) {
    
      var i, pos = -1, arr, found;
      
      arr[0] = 0;
      
      found = rinv_list_items(-1, item_types[type], 6, 999999, 0, arr);
      
      for (i = 0; i &lt; found; i += 1) {
      
        if (arr[i, 1] == selected) { pos = i; break; }
      
        }
        
      if (pos &gt; 0) {
      
        rinv_swap_items(-1, selected, arr[pos - 1, 1]);
        
        selected = arr[pos - 1, 1];
      
        }
      
      }
  
    }
    
  }

if (gui_draw_sprite_clickable(spr_window_button_msort_2, 1, xx+344, yy+728, true, "Move down/right")) {

  if (selected &lt;= 4) {
  
    if (selected &lt; 4) {
    
      rinv_swap_items(-1, selected, selected + 1);
      
      selected += 1;
      
      event_user(ev_update_desc);
    
      if (global.rinv_active_slot == selected ||
          global.rinv_active_slot == selected - 1) {
        
         player_update_hands();
      
        }
      
      }
      
    // ... player_update_hands();
  
    }
  else {
  
    if (selected != -1) {
    
      var i, pos = -1, arr, found;
      
      arr[0] = 0;
      
      found = rinv_list_items(-1, item_types[type], 6, 999999, 0, arr);
      
      for (i = 0; i &lt; found; i += 1) {
      
        if (arr[i, 1] == selected) { pos = i; break; }
      
        }
        
      if (pos != -1 and pos &lt; found - 1) {
      
        rinv_swap_items(-1, selected, arr[pos + 1, 1]);
        
        selected = arr[pos + 1, 1];
      
        }
      
      }
  
    }
    
  }
 
//Automatic sort button:
if (gui_draw_sprite_clickable(spr_window_button_asort,0,xx+166,yy+728,true,"Sort by name")) {
  
  rinv_sort_name(-1, true, true);

  selected = -1;
  
  desc_scroll = 0;
  
  }
  
//Stack button: - TODO Sort by weight
if (gui_draw_sprite_clickable(spr_window_button_stack,0,xx+252,yy+728,true,"Sort by weight")) {
  
  rinv_sort_weight(-1, false, true);

  selected = -1;
  
  desc_scroll = 0;
  
  }
  
//Weight counter:
draw_set_color(c_black);
var maxcw = round(PLAYER.carryWeight * (global.player_obj_id).mod_carryw);
ftlerp();
draw_text(xx+604, yy+796, "Wg: " + string(rinv_weight(-1)) + " / " + string(maxcw));
rtlerp(tlerp);

//Close button:
if (gui_draw_sprite_clickable_rel(spr_window_close, 0, xx+596, yy+848))
  instance_destroy();
 
 
 
 
 
 
 
 
 
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rinv_refresh(-1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inv_add_item("Bullet vest",1);
var a;

a[0] = rinv_add_simple(-1, "Stimpack", 5);
a[1] = rinv_add_simple(-1, "Jitter",   5);
a[2] = rinv_add_simple(-1, "Relaxer",  5);
a[3] = rinv_add_simple(-1, "CTW",      5);
a[4] = rinv_add_simple(-1, "Bullet", 100);

a[5] = rinv_add_complex(-1, "Machinegun", 0, 1, 100, 0, 0);

//show_message(a);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*inv_add_item("Flamethrower",1);
inv_add_item("Acid Flask Launcher",1);
inv_add_item("Machinegun",1);*/

rinv_add_simple(-1, "Spare parts", 8);
rinv_add_complex(-1, "Bullet vest");
rinv_add_complex(-1, "Revolver", 0, 1, 100, 0, 0);

rinv_add_complex(-1, "Assault Rifle", 0, 1, 100, 0, 0);
rinv_add_complex(-1, "Bolt Action Rifle", 0, 1, 100, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*inv_add_item("Fuel",50);
inv_add_item("Spare parts",5);
inv_add_item("Acid Flask",50);
inv_add_item("Bullet",50);*/

rinv_add_simple(-1, "Jar", 1);
rinv_add_simple(-1, "Human heart", 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>188,188</point>
  </PhysicsShapePoints>
</object>
