<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_repair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic variables setup:
scroll=0;
selected="";

xx=0;
yy=0;

//Update repair combinations:
/*

if sev_get("Abc")=true repair_define_repair_item("Def", 50);

*/

//Maximum target durability:
update_maxdur=true;

//Repair item list:
var i;

for (i=1; i&lt;=10; i+=1) begin
 item_list[i]="";
end;

update_list=true;
 
//... array:
/*var i;

for (i=1; i&lt;=16; i+=1) begin
 if i mod 2 = 1
   comb_array[i]=""
  else comb_array[i]=0;
end;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with (instance_create(x, y, obj_gui_inventory)) {

  selected = other.target;
  
  event_user(ev_update_desc);

  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Closing:
if keyboard_check_pressed(userControls[KEYBOARD.pause])=true
 instance_destroy();

//Scroll:
if mouse_wheel_down()=true {
 if item_list[10]&lt;&gt;"" scroll+=1;
 }
 else if mouse_wheel_up()=true {
  if scroll&gt;0 scroll-=1;
  }

//Scroll correction:
if item_list[10]="" and scroll&gt;0
 scroll-=1;
  
//Maximum durability update:
if update_maxdur=true {
   
 var static_id = rinv_local_to_static(-1, target);
 
 var name = rinv_item_get_static_value(static_id, RINV_STATIC.name);
   
 maxdur = wpn_sys_get_max_dur(name);
   
 update_maxdur=false;
 
 }

//Repair item lst update:
if update_list=true {

 var i,counter,valid_counter,current;

 for (i=1; i&lt;=10; i+=1) begin
  item_list[i]="";
 end;

 current=ds_map_find_first(global.repair_map);
 valid_counter=0;
 counter=1;
 
 for (i=1; i&lt;=ds_map_size(global.repair_map); i+=1) begin
 
  if rinv_count_item(-1, current)&gt;0 valid_counter+=1;
  
  if valid_counter&gt;scroll {
   item_list[counter]=current;
   counter+=1;
   }
   
  if current&lt;&gt;ds_map_find_last(global.repair_map)
   current=ds_map_find_next(global.repair_map,current)
   else break;
   
  if counter&gt;10 break;
 
 end;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spr,val,counter;

var sprite_scale = 2;

fnt_draw_set(FONT.window);

//Set up GUI x and y:
xx=gui_width()/2-sprite_get_width(sprite_index)*sprite_scale/2;
yy=gui_height()/2-sprite_get_height(sprite_index)*sprite_scale/2;

//Draw own sprite:
draw_sprite_ext(sprite_index,0,xx,yy,sprite_scale,sprite_scale,0,c_white,1);

//ITEM LIST::
draw_set_alpha(1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

counter=0;

//LOOP BEGIN:
repeat (10) begin
counter+=1;

if item_list[counter]&lt;&gt;"" {

//Small icons:
spr=rinv_item_get_static_value(item_list[counter], RINV_STATIC.icon);
draw_sprite_ext(spr,0,xx+18,yy+counter*40+86,1,1,0,c_white,1); 

//Clickable text boxes:
spr=tern(item_list[counter],selected,1,0);
if gui_draw_sprite_clickable_ext(spr_window_name_box_wide,spr,xx+58,yy+counter*40+86,1,2,2,1)=true
 {selected=item_list[counter]; 
  /*update_array=true;*/}

//Combination names:
draw_set_color(c_black);
 draw_text(xx+64,yy+88+40*counter,item_list[counter]+" ("+string(rinv_count_item(-1, item_list[counter]))+")");

}
end;
//LOOP END;

//Filter title:
draw_set_color(c_black);
draw_text(xx+24,yy+84,"Items to repair with:");

//REPAIR ITEM BEGIN:

//Item name:
if selected&lt;&gt;"" str=selected+" ("+string(rinv_count_item(-1, selected))+")";
 else str="No item selected.";
draw_text(xx+508,yy+82,str);

//Item icon:
if selected&lt;&gt;"" {
 spr=rinv_item_get_static_value(selected, RINV_STATIC.icon);
 draw_sprite_ext(spr,0,xx+710,yy+134,2,2,0,c_white,1);
 }

//Repair power:
if selected&lt;&gt;"" {
 str="Repair#potency: "+string(global.repair_map[?selected]);
 draw_text(xx+508,yy+140,str);
 }

//REPAIR ITEM END;

//SCROLL:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+460,yy+126,true)=true {
 if scroll&gt;0 scroll-=1;
 }
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+460,yy+488,true)=true {
 if item_list[10]&lt;&gt;"" scroll+=1;
 }

//REPAIRED ITEM BEGIN:

//Item name:
draw_set_colour(c_black);

var static_id = rinv_local_to_static(-1, target);
  
str = rinv_item_get_static_value(static_id, RINV_STATIC.name);
  
draw_text(xx+508,yy+236,str);

//Item icon:
spr = rinv_item_get_static_value(static_id, RINV_STATIC.icon);
  
draw_sprite_ext(spr,0,xx+710,yy+288, 2, 2, 0, c_white, 1);

//Durability:
str = rinv_item_get_dynamic_value(-1, target, WPTRN.xdur);
  
str = "Durability:#"+string(round(str))+" / "+string(maxdur);

draw_text(xx+508, yy+294, str);

//Durability after repair:
if (selected != "") {

 draw_set_color(c_green);

 str = min(rinv_item_get_dynamic_value(-1, target, WPTRN.xdur) + global.repair_map[?selected],
           maxdur);
   
 str="After repair:#"+string(round(str))+" / "+string(maxdur);
 
 draw_text(xx+508,yy+418,str);
 
 }

//REPAIRED ITEM END;

//Repair button:
if (selected != "") {
   
 val = rinv_item_get_dynamic_value(-1, target, WPTRN.xdur);

 if (clamp(val+global.repair_map[?selected],0,maxdur) != val)
  spr = 0;
 else
  spr = 1;
   
 if (selected != "" and rinv_count_item(-1, selected) &lt; 1) {
  spr = 1;
  selected = "";
  }
 
   
}
else
 spr=1;

if (gui_draw_sprite_clickable_ext(spr_window_button_repair,spr,xx+494,yy+496,true,2,2,1)) {

  if (spr == 0) {
 
    rinv_item_set_dynamic_value(-1, target, WPTRN.xdur, round(clamp(val+global.repair_map[?selected],0,maxdur)));
     
    if (target &lt;= 4 and instance_exists(weaponHoldingPar)) {
     
      if (weaponHoldingPar.patron == target)
        weaponHoldingPar.xdur = round(clamp(val+global.repair_map[?selected],0,maxdur));
     
      }
      
    rinv_remove_simple(-1, selected, 1);
     
    }
    
  }

//Close button:
if gui_draw_sprite_clickable_rel(spr_window_close,0,xx+566,yy+540)
  instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>200,200</point>
  </PhysicsShapePoints>
</object>
